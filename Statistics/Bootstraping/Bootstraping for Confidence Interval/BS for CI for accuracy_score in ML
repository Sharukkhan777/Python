#---------------------------------------------
# Title
# Finding the confidence interval for the accuracy_score
#---------------------------------------------
# GIVES
# It gives the confidence interval for the accuracy_score
#---------------------------------------------
# SOURCE 
# https://machinelearningmastery.com/calculate-bootstrap-confidence-intervals-machine-learning-results-python/
# DATA
# https://raw.githubusercontent.com/jbrownlee/Datasets/master/pima-indians-diabetes.data.csv
#---------------------------------------------
# PROGRAM

# importing libraries
import numpy
import pandas as pd
from sklearn.utils import resample
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score
from matplotlib import pyplot

# load dataset
data = pd.read_csv('C:\Sharukkhan\All Project\Programming\Statistics\Bootstrapping for CI\Data\pima indians.csv')

# .values 
# convert each dataframe rows into list and put it in one list
# why we doing this here?
# because we take the sample of train data as some rows and
# keep the remaining rows as sample data
values = data.values


# configure bootstrap
#--------------------
# ten thousand is the optimum number
n_iterations = 10000

# Train and Test split of 50-50
n_size = int(len(data) * 0.50)

# run bootstrap
stats = list() # is equal to stats = []
for i in range(n_iterations):
    
	# prepare train and test sets
    #----------------------------
    # here we use resample method from sklearn
	train = resample(values, n_samples=n_size)
    # here we take the remaining rows as test data
	test = numpy.array([x for x in values if x.tolist() not in train.tolist()])
    
	# fit model
    #----------
	model = DecisionTreeClassifier()
    # separate the independent and dependent variable
	model.fit(train[:,:-1], train[:,-1])
    
	# evaluate model
    #--------------
	predictions = model.predict(test[:,:-1])
    # find the accuracy_score for the original and predicted data
	score = accuracy_score(test[:,-1], predictions)
	print(score)
    
    # record the accuracy_score 
	stats.append(score)
    
# plot scores
pyplot.hist(stats)
pyplot.show()
# confidence intervals
alpha = 0.99

p = ((1.0-alpha)/2.0) * 100
# here we use max(0.0, ) and min(1.0,) 
# it means the value should between the interval from 0.0 to 1.0
lower = max(0.0, numpy.percentile(stats, p))
# alpha+
p = (alpha+((1.0-alpha)/2.0)) * 100
upper = min(1.0, numpy.percentile(stats, p))

print('%.1f confidence interval %.1f%% and %.1f%%' % (alpha*100, lower*100, upper*100))


