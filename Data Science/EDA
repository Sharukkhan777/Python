# EDA

# website
# https://towardsdatascience.com/exploratory-data-analysis-in-python-c9a77dfa39ce
# Importing required libraries.
import pandas as pd
import numpy as np
import seaborn as sns #visualisation
import matplotlib.pyplot as plt #visualisation
sns.set(color_codes=True)

# read the dataset
df = pd.read_csv(r'C:\Sharukkhan\All Project\Programming\Data Science\Python\EDA\cardataset.csv')

# Checking the data type
df.dtypes

# Dropping irrelevant columns
df = df.drop(['Engine Fuel Type', 'Market Category', 'Vehicle Style', 'Popularity', 'Number of Doors', 'Vehicle Size'], axis=1)
df.head(5)

# Renaming the column names
df = df.rename(columns={'Engine HP': 'HP', 'Engine Cylinders': 'Cylinders', 'Transmission Type': 'Transmission', 'Driven_Wheels': 'Drive Mode','highway MPG': 'MPG-H', 'city mpg': 'MPG-C', 'MSRP': 'Price' })
df.head(5)

# Total number of rows and columns
df.shape

#``````````````````````````````````````````````````````````````````````
# Rows containing duplicate data
duplicate_rows_df = df[df.duplicated()]
print('number of duplicate rows: ', duplicate_rows_df.shape)

# Used to count the number of rows before removing the data
df.count()

# Dropping the duplicates 
df = df.drop_duplicates()
df.head(5)
#``````````````````````````````````````````````````````````````````````
# handle the missing values
# Finding the null values.
print(df.isnull().sum())

# Dropping the missing values rows.
df = df.dropna() 
df.count()

# After dropping the values
print(df.isnull().sum()) 
#``````````````````````````````````````````````````````````````````````
# Detecting Outliers
sns.boxplot(x=df['Price'])
sns.boxplot(x=df['HP'])
sns.boxplot(x=df['Cylinders'])

Q1 = df.quantile(0.25)
Q3 = df.quantile(0.75)
IQR = Q3 - Q1
print(IQR)

df = df[~((df < (Q1 - 1.5 * IQR)) |(df > (Q3 + 1.5 * IQR))).any(axis=1)]
df.shape
#``````````````````````````````````````````````````````````````````````
# Plotting a Histogram
df.Make.value_counts().nlargest(10).plot(kind='bar', figsize=(10,10))
plt.title('Number of cars by make')
plt.ylabel('Number of cars')
plt.xlabel('Make')
#``````````````````````````````````````````````````````````````````````
# heat map
# Finding the relations between the variables.
plt.figure(figsize=(20,10))
c= df.corr()
sns.heatmap(c,cmap='BrBG',annot=True)
c
#``````````````````````````````````````````````````````````````````````
# relation between two variables 
# Plotting a scatter plot
fig, ax = plt.subplots(figsize=(10,6))
ax.scatter(df['HP'], df['Price'])
ax.set_xlabel('HP')
ax.set_ylabel('Price')
plt.show()
#``````````````````````````````````````````````````````````````````````

# Extras

# to print the information data types and null values
df.info()

# basic statistics information
df.describe()

# take only number columns
df_num = df.select_dtypes(include = ['float64', 'int64'])
df_num.head()




