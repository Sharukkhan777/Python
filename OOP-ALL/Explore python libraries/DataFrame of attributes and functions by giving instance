#---------------------------------------------
# Title
# To see functions, method, attributes etc.,,,,,,,,,,,,,,,,
#---------------------------------------------
#Parameters:
#1) instance = instance of the class or module or keywords like "list".

#eg: 
#
#p = Point() # here point is a class
#list_attributes_and_functions_in_class(p)
#
#import pandas as pd
#list_attributes_and_functions_in_class(pd)
#
#list_attributes_and_functions_in_class(list)

#---------------------------------------------
#Return 
# tuple of info_str, df

# to see functions and attributes inside 

def list_attributes_and_functions_in_class(instance):
    import inspect
    import pandas as pd

    list_of_dir = dir(instance)
    # new list of dir without '__' start
    new_list = []
    for i in list_of_dir:
        if i[:2] == "__":
            continue
        else:
            new_list.append(i)
    # separation of attributes and functions
    list_of_attributes_functions = []
    for i in new_list:
        ####
        val_builtin = eval("inspect.isbuiltin(instance."+str(i)+")")
        val_class = eval("inspect.isclass(instance."+i+")")
        val_method = eval("inspect.ismethod(instance."+i+")")      
        val_method_des = eval("inspect.ismethoddescriptor(instance."+i+")")
        val_data_des = eval("inspect.isdatadescriptor(instance."+i+")")
        val_function = eval("inspect.isfunction(instance."+i+")")
        val_module = eval("inspect.ismodule(instance."+i+")")
        val_abstract = eval("inspect.isabstract(instance."+i+")")
        if val_builtin:
            list_of_attributes_functions.append("Python's inbuilt")
        elif val_class:
            list_of_attributes_functions.append("Class")
        elif val_method:
            list_of_attributes_functions.append("Method")
        elif val_method_des:
            list_of_attributes_functions.append("Method_descriptor")
        elif val_data_des:
            list_of_attributes_functions.append("Data_descriptor")
        elif val_function:
            list_of_attributes_functions.append("Functions")
        elif val_module:
            list_of_attributes_functions.append("Module")
        elif val_abstract:
            list_of_attributes_functions.append("Abstract Base Class")
        else:
            list_of_attributes_functions.append("Attribute or Something else")
        
    # change to dataframe
    import pandas as pd
    df = pd.DataFrame({'Name':new_list,
                       'What it is':list_of_attributes_functions})
    # about info
    sum = 0
    for i in new_list:
        if str(i) in dir(__builtins__):
            sum = sum + 1
        else:
            continue
    if sum > 0:
        info_str = "Bad signal has "+str(sum)+" name(s) contains Python's inbuilt names"
    else:
        info_str = "Good signal Your Attribute or Function or else, name not contains Python's inbuilt names"
    return info_str,df
